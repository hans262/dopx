/**
 * 二进制 -> 0b
 * js中表示
 * 0b010 = 2
 * 
 * 算法：除以2取余数，然后从下向上排列
 * 11/2 1
 * 5/2  1
 * 2/2  0
 * 1/2  1
 *
 * 常见二进制数字
 * 0000   0
 * 0001   1
 * 0010   2
 * 0011   3
 *
 * 
 * 16进制 -> 0x
 * A ~ F = 10 ~ 15
 * js中表示
 * 0x20 = 32
 * 0xA = 10
 * 
 * 8进制 -> 0o
 * js中表示
 * 0o10 = 8
 * 
 * 
 * 科学计数法 -> E
 * 含义：表示极大极小数
 * 
 * 2E4 = 2 * (10 ** 4)
 * 3.125E7 = 3.125 * (10 ** 7)
 * 2E-2 = 2 * (0.1 ** 2)
 * 
 * 
 * 1byte 所占用的位数：
 * 0000 0000 0000 0000 0000 0000 0000 0101
 * 
 * 
 * ~ 按位取反 ->
 * 0000 0000 0000 0000 0000 0000 0000 0101     5
 * 1111 1111 1111 1111 1111 1111 1111 1010     -6
 * 
 * 
 * 原码 ->
 * 原码表示法即最高位为符号位
 * +11 原码 00001011
 * -11 原码 10001011
 * 
 * 1111 1111 1111 1111 1111 1111 1111 1010
 * 左边为1，表示负数
 * 取反后 + 1 = 原码
 * 0000 0000 0000 0000 0000 0000 0000 0101 + 1 = -6
 * 
 * 补码 ->
 * 使用高位作为符号位，
 * 正数的补码就是正数本身，
 * 负数的补码就是其原码取反加一的结果。
 * 
 * 
 * -10 ，二进制表示为
 * 1000 0000 0000 0000 0000 0000 0000 1010
 * 
 * 原码，取其绝对值也就是10，即
 * 0000 0000 0000 0000 0000 0000 0000 1010
 * 
 * 反码，按位取反，得
 * 1111 1111 1111 1111 1111 1111 1111 0101
 * 
 * 补码，即将反码加1，得
 * 1111 1111 1111 1111 1111 1111 1111 0110
 * 
 * 
 * 取反两次，求绝对值
 * ~~
 * 
 * 
 * 一个字节存储最大的数字是 ->
 * 
 * 无符号
 * 最小 00000000  0
 * 最大 11111111  255
 * 
 * 有符号，首位为符号位
 * 最小 11111111  -128
 * 最大 01111111  127
 */

/**
 * >> 右移运算符 ->
 * 11 >> 2 = 2
 * 0000 0000 0000 0000 0000 0000 0000 1011
 *                \|/
 * 0000 0000 0000 0000 0000 0000 0000 0010
 *
 * 
 * << 左移运算符 ->
 * 3 << 2 = 12
 * 0000 0000 0000 0000 0000 0000 0000 0011
 *                \|/
 * 0000 0000 0000 0000 0000 0000 0000 1100
 *
 *
 * ^  按位异或xor -> 真真=假，真假=真，假假=假
 * 3 ^ 2 = 1
 * 0000 0000 0000 0000 0000 0000 0000 0011
 * 0000 0000 0000 0000 0000 0000 0000 0010
 *                \|/
 * 0000 0000 0000 0000 0000 0000 0000 0001
 *
 *
 * &  按位and -> 真真=真，真假=假，假假=假
 * 25 & 3 = 1
 * 0000 0000 0000 0000 0000 0000 0001 1001
 * 0000 0000 0000 0000 0000 0000 0000 0011
 *                \|/
 * 0000 0000 0000 0000 0000 0000 0000 0001
 * 
 * 
 * |  按位or -> 真真=真，真假=真，假假=假
 * 2 | 3 = 3
 * 0000 0000 0000 0000 0000 0000 0000 0010
 * 0000 0000 0000 0000 0000 0000 0000 0011
 *                \|/
 * 0000 0000 0000 0000 0000 0000 0000 0011
 * 
 */