/**
 * 神经网络
 * 小明决定要不要去参加动漫展览
 * 
 * 训练模型：
 * 输入和输出
 * 权重（w）和阈值（b）
 * 多层感知器的结构
 * 
 * 其他参数都不变，w（或b）的微小变动，记作Δw（或Δb），然后观察输出有什么变化。
 * 不断重复这个过程，直至得到对应最精确输出的那组w和b，就是我们要的值。这个过程称为模型的训练。
 * 
 */


//天气：周末是否晴天？
const X1 = 1
const W1 = 8
//同伴：能否找到人一起去？
const X2 = 0
const W2 = 4
//价格：门票是否可承受？
const X3 = 1
const W3 = 4

//预定阈值
//阈值越低就表示越想去，越高就越不想去
const B = 8

//结果
const output = (X1 * W1 + X2 * W2 + X3 * W3) > B ? 1 : 0
debugger

/**
 * 车牌自动识别：
 * 输入：车牌照片
 * 输出：车牌号码
 * 权重：照片的清晰度
 * 
 * 车牌照片就是输入，车牌号码就是输出，照片的清晰度可以设置权重（W）。
 * 然后，找到一种或多种图像比对算法，作为感知器。算法的得到结果是一个概率，
 * 比如75%的概率可以确定是数字1。这就需要设置一个阈值（B）（比如85%的可信度），
 * 低于这个门槛结果就无效。
 * 
 * 一组已经识别好的车牌照片，作为训练集数据，
 * 输入模型。不断调整各种参数，直至找到正确率最高的参数组合。
 * 以后拿到新照片，就可以直接给出结果了。
 */

/**
 * 图像相似算法
 * 返回结果：相似百分比
 * 将图片缩小到8x8的尺寸，总共64个像素，对每张图片生成一个"指纹"（fingerprint）字符串，
 * 然后比较不同图片的指纹。结果越接近，就说明图片越相似。
 * 
 * 颜色分布发：
 * 每张图片都可以生成颜色分布的直方图（color histogram）。
 * 如果两张图片的直方图很接近，就可以认为它们很相似。
 * 
 */