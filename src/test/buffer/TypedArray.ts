/**
 * TypedArray
 * 二进制数据缓存区，视图
 * 每一个位置占用当前位的字节
 * 与Buffer的区别
 * slice方法的实现没有Buffer的性能高
 * 
 */

//分配8个字节的缓冲区
let f64a = new Float64Array(1)
f64a.fill(3.1415926)
console.log(f64a)
debugger

/**
 * | TYPE            | RANGE                  |   SIZE              |
 * +-----------------+------------------------+---------------------+
 * | Int8Array       | -2 ** 7 ~ 2 ** 7       |   1BYTE             |
 * +-----------------+------------------------+---------------------+
 * | Uint8Arr        | 0 ~ 2 ** 8             |   1BYTE             |
 * +-----------------+------------------------+---------------------+
 * | Uint8ClampedArr | 0 ~ 255  溢出处理不同!  |   1BYTE             |
 * +-------------------+----------------------+---------------------+
 * | Int16Array      | -2 ** 15 ~ 2 ** 15     |   2BYTE             |
 * +-----------------+------------------------+---------------------+
 * | Uint16Array     | 0 ~ 2 ** 16            |   2BYTE             |
 * +-----------------+------------------------+---------------------+
 * | Int32Array      | -2 ** 31 ~ 2 ** 31     |   4BYTE             |
 * +-----------------+------------------------+---------------------+
 * | Uint32Array     | 0 ~ 2 ** 32            |   4BYTE             |
 * +-----------------+------------------------+---------------------+
 * | BigInt64Array   | -2n ** 63n ~ 2n ** 63n |   8BYTE             |
 * +-----------------+------------------------+---------------------+
 * | BigUint64Array  | 0n ~ 2n ** 64n         |   8BYTE             |
 * +-----------------+------------------------+---------------------+
 * | Float32Array    |                        |   4BYTE             |
 * +-----------------+------------------------+---------------------+
 * | Float64Array    |                        |   8BYTE             |
 * +-----------------+------------------------+---------------------+
 */